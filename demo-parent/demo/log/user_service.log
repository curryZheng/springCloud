[ INFO ] [2019-01-23 10:20:00] org.springframework.context.annotation.AnnotationConfigApplicationContext -Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@70ab2d48: startup date [Wed Jan 23 10:20:00 CST 2019]; root of context hierarchy
[ INFO ] [2019-01-23 10:20:01] org.hibernate.validator.internal.util.Version -HV000001: Hibernate Validator 6.0.2.Final
[ INFO ] [2019-01-23 10:20:01] org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor -JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
[ INFO ] [2019-01-23 10:20:01] org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker -Bean 'configurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$f2ce042f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[ INFO ] [2019-01-23 10:20:03] org.springframework.cloud.netflix.eureka.InstanceInfoFactory -Setting initial instance status as: STARTING
[ INFO ] [2019-01-23 10:20:04] com.netflix.discovery.DiscoveryClient -Initializing Eureka in region us-east-1
[ INFO ] [2019-01-23 10:20:04] com.netflix.discovery.provider.DiscoveryJerseyProvider -Using JSON encoding codec LegacyJacksonJson
[ INFO ] [2019-01-23 10:20:04] com.netflix.discovery.provider.DiscoveryJerseyProvider -Using JSON decoding codec LegacyJacksonJson
[ INFO ] [2019-01-23 10:20:04] com.netflix.discovery.provider.DiscoveryJerseyProvider -Using XML encoding codec XStreamXml
[ INFO ] [2019-01-23 10:20:05] com.netflix.discovery.provider.DiscoveryJerseyProvider -Using XML decoding codec XStreamXml
[ INFO ] [2019-01-23 10:20:06] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver -Resolving eureka endpoints via configuration
[ INFO ] [2019-01-23 10:20:07] com.netflix.discovery.DiscoveryClient -Disable delta property : false
[ INFO ] [2019-01-23 10:20:07] com.netflix.discovery.DiscoveryClient -Single vip registry refresh property : null
[ INFO ] [2019-01-23 10:20:07] com.netflix.discovery.DiscoveryClient -Force full registry fetch : false
[ INFO ] [2019-01-23 10:20:07] com.netflix.discovery.DiscoveryClient -Application is null : false
[ INFO ] [2019-01-23 10:20:07] com.netflix.discovery.DiscoveryClient -Registered Applications size is zero : true
[ INFO ] [2019-01-23 10:20:07] com.netflix.discovery.DiscoveryClient -Application version is -1: true
[ INFO ] [2019-01-23 10:20:07] com.netflix.discovery.DiscoveryClient -Getting all instance registry info from the eureka server
[ INFO ] [2019-01-23 10:20:10] com.netflix.discovery.DiscoveryClient -The response status is 200
[ INFO ] [2019-01-23 10:20:10] com.netflix.discovery.DiscoveryClient -Not registering with Eureka server per configuration
[ INFO ] [2019-01-23 10:20:10] com.netflix.discovery.DiscoveryClient -Discovery Client initialized at timestamp 1548210010389 with initial instances count: 2
[ INFO ] [2019-01-23 10:20:11] org.springframework.cloud.config.client.ConfigServicePropertySourceLocator -Fetching config from server at: http://10.10.1.210:7742/
[ INFO ] [2019-01-23 10:20:14] org.springframework.cloud.config.client.ConfigServicePropertySourceLocator -Located environment: name=demo-user-service, global-swagger,global-db, profiles=[dev], label=master, version=null, state=null
[ INFO ] [2019-01-23 10:20:14] org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration -Located property source: CompositePropertySource [name='configService', propertySources=[MapPropertySource {name='classpath:/config/dev/global-db.yml'}, MapPropertySource {name='classpath:/config/dev/demo-user-service.yml'}]]
[ INFO ] [2019-01-23 10:20:14] com.demo.user.UserApplication -No active profile set, falling back to default profiles: default
[ INFO ] [2019-01-23 10:20:14] org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext -Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@66d25ba9: startup date [Wed Jan 23 10:20:14 CST 2019]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@70ab2d48
[ INFO ] [2019-01-23 10:20:19] org.springframework.cloud.context.scope.GenericScope -BeanFactory id=4a119542-2ba0-3219-a8fa-1d616e415c87
[ INFO ] [2019-01-23 10:20:19] org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor -JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
[ INFO ] [2019-01-23 10:20:20] org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$d6b40132] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[ INFO ] [2019-01-23 10:20:21] org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker -Bean 'org.springframework.cloud.netflix.metrics.MetricsInterceptorConfiguration$MetricsRestTemplateConfiguration' of type [org.springframework.cloud.netflix.metrics.MetricsInterceptorConfiguration$MetricsRestTemplateConfiguration$$EnhancerBySpringCGLIB$$8e0a773] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[ INFO ] [2019-01-23 10:20:21] org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker -Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$f2ce042f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[ INFO ] [2019-01-23 10:20:23] org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer -Tomcat initialized with port(s): 6608 (http)
[ INFO ] [2019-01-23 10:20:23] org.apache.catalina.core.StandardService -Starting service [Tomcat]
[ INFO ] [2019-01-23 10:20:23] org.apache.catalina.core.StandardEngine -Starting Servlet Engine: Apache Tomcat/8.5.20
[ INFO ] [2019-01-23 10:20:25] org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] -Initializing Spring embedded WebApplicationContext
[ INFO ] [2019-01-23 10:20:25] org.springframework.web.context.ContextLoader -Root WebApplicationContext: initialization completed in 10217 ms
[ INFO ] [2019-01-23 10:20:26] org.springframework.boot.web.servlet.ServletRegistrationBean -Mapping servlet: 'dispatcherServlet' to [/]
[ INFO ] [2019-01-23 10:20:27] org.springframework.boot.web.servlet.ServletRegistrationBean -Mapping servlet: 'statViewServlet' to [/druid/*]
[ INFO ] [2019-01-23 10:20:27] org.springframework.boot.web.servlet.FilterRegistrationBean -Mapping filter: 'metricsFilter' to: [/*]
[ INFO ] [2019-01-23 10:20:27] org.springframework.boot.web.servlet.FilterRegistrationBean -Mapping filter: 'characterEncodingFilter' to: [/*]
[ INFO ] [2019-01-23 10:20:27] org.springframework.boot.web.servlet.FilterRegistrationBean -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
[ INFO ] [2019-01-23 10:20:27] org.springframework.boot.web.servlet.FilterRegistrationBean -Mapping filter: 'httpPutFormContentFilter' to: [/*]
[ INFO ] [2019-01-23 10:20:27] org.springframework.boot.web.servlet.FilterRegistrationBean -Mapping filter: 'requestContextFilter' to: [/*]
[ INFO ] [2019-01-23 10:20:27] org.springframework.boot.web.servlet.FilterRegistrationBean -Mapping filter: 'webRequestLoggingFilter' to: [/*]
[ INFO ] [2019-01-23 10:20:27] org.springframework.boot.web.servlet.FilterRegistrationBean -Mapping filter: 'webStatFilter' to urls: [/*]
[ INFO ] [2019-01-23 10:20:27] org.springframework.boot.web.servlet.FilterRegistrationBean -Mapping filter: 'applicationContextIdFilter' to: [/*]
[ INFO ] [2019-01-23 10:20:32] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -Mapped "{[/user/queryUserById],methods=[POST],consumes=[application/json;charset=UTF-8],produces=[application/json;charset=UTF-8]}" onto public com.demo.common.structure.ResultBean<com.demo.user.api.dto.rsp.UserDto> com.demo.user.controller.UserControllerImpl.queryUserById(com.demo.user.api.dto.req.QueryShopById)
[ INFO ] [2019-01-23 10:20:32] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -Mapped "{[/user/queryUserDto],methods=[POST],consumes=[application/json;charset=UTF-8],produces=[application/json;charset=UTF-8]}" onto public com.demo.common.structure.ResultPageBean<java.util.List<com.demo.user.api.dto.rsp.UserDto>> com.demo.user.controller.UserControllerImpl.queryUserDto(com.demo.user.api.dto.req.QueryUserReq)
[ INFO ] [2019-01-23 10:20:32] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
[ INFO ] [2019-01-23 10:20:32] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
[ INFO ] [2019-01-23 10:20:32] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
[ INFO ] [2019-01-23 10:20:32] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
[ INFO ] [2019-01-23 10:20:32] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
[ INFO ] [2019-01-23 10:20:32] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
[ INFO ] [2019-01-23 10:20:35] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/metrics/{name:.*}],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.MetricsMvcEndpoint.value(java.lang.String)
[ INFO ] [2019-01-23 10:20:35] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/metrics || /metrics.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 10:20:35] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/resume || /resume.json],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.endpoint.GenericPostableMvcEndpoint.invoke()
[ INFO ] [2019-01-23 10:20:35] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/autoconfig || /autoconfig.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 10:20:35] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/env/{name:.*}],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EnvironmentMvcEndpoint.value(java.lang.String)
[ INFO ] [2019-01-23 10:20:35] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/env || /env.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 10:20:35] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/auditevents || /auditevents.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public org.springframework.http.ResponseEntity<?> org.springframework.boot.actuate.endpoint.mvc.AuditEventsMvcEndpoint.findByPrincipalAndAfterAndType(java.lang.String,java.util.Date,java.lang.String)
[ INFO ] [2019-01-23 10:20:35] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/heapdump || /heapdump.json],methods=[GET],produces=[application/octet-stream]}" onto public void org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpoint.invoke(boolean,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.io.IOException,javax.servlet.ServletException
[ INFO ] [2019-01-23 10:20:35] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/archaius || /archaius.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 10:20:35] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/refresh || /refresh.json],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.endpoint.GenericPostableMvcEndpoint.invoke()
[ INFO ] [2019-01-23 10:20:35] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/configprops || /configprops.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 10:20:35] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/mappings || /mappings.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 10:20:35] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/loggers/{name:.*}],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.LoggersMvcEndpoint.get(java.lang.String)
[ INFO ] [2019-01-23 10:20:35] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/loggers/{name:.*}],methods=[POST],consumes=[application/vnd.spring-boot.actuator.v1+json || application/json],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.LoggersMvcEndpoint.set(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)
[ INFO ] [2019-01-23 10:20:35] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/loggers || /loggers.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 10:20:35] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/features || /features.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 10:20:35] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/info || /info.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 10:20:35] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/env],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.context.environment.EnvironmentManagerMvcEndpoint.value(java.util.Map<java.lang.String, java.lang.String>)
[ INFO ] [2019-01-23 10:20:35] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/env/reset],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> org.springframework.cloud.context.environment.EnvironmentManagerMvcEndpoint.reset()
[ INFO ] [2019-01-23 10:20:35] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/dump || /dump.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 10:20:35] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/trace || /trace.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 10:20:35] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/beans || /beans.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 10:20:35] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/health || /health.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint.invoke(javax.servlet.http.HttpServletRequest,java.security.Principal)
[ INFO ] [2019-01-23 10:20:35] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/restart || /restart.json],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.context.restart.RestartMvcEndpoint.invoke()
[ INFO ] [2019-01-23 10:20:35] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/service-registry/instance-status],methods=[POST]}" onto public org.springframework.http.ResponseEntity<?> org.springframework.cloud.client.serviceregistry.endpoint.ServiceRegistryEndpoint.setStatus(java.lang.String)
[ INFO ] [2019-01-23 10:20:35] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/service-registry/instance-status],methods=[GET]}" onto public org.springframework.http.ResponseEntity org.springframework.cloud.client.serviceregistry.endpoint.ServiceRegistryEndpoint.getStatus()
[ INFO ] [2019-01-23 10:20:35] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/pause || /pause.json],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.endpoint.GenericPostableMvcEndpoint.invoke()
[ WARN ] [2019-01-23 10:20:36] com.netflix.config.sources.URLConfigurationSource -No URLs will be polled as dynamic configuration sources.
[ INFO ] [2019-01-23 10:20:36] com.netflix.config.sources.URLConfigurationSource -To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[ WARN ] [2019-01-23 10:20:36] com.netflix.config.sources.URLConfigurationSource -No URLs will be polled as dynamic configuration sources.
[ INFO ] [2019-01-23 10:20:36] com.netflix.config.sources.URLConfigurationSource -To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[ INFO ] [2019-01-23 10:20:37] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter -Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@66d25ba9: startup date [Wed Jan 23 10:20:14 CST 2019]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@70ab2d48
[ INFO ] [2019-01-23 10:20:37] org.springframework.web.servlet.handler.SimpleUrlHandlerMapping -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
[ INFO ] [2019-01-23 10:20:37] org.springframework.web.servlet.handler.SimpleUrlHandlerMapping -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
[ INFO ] [2019-01-23 10:20:37] org.springframework.web.servlet.handler.SimpleUrlHandlerMapping -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
[ INFO ] [2019-01-23 10:20:39] org.springframework.ui.freemarker.SpringTemplateLoader -SpringTemplateLoader for FreeMarker: using resource loader [org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@66d25ba9: startup date [Wed Jan 23 10:20:14 CST 2019]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@70ab2d48] and template loader path [classpath:/templates/]
[ INFO ] [2019-01-23 10:20:39] org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer -ClassTemplateLoader for Spring macros added to FreeMarker configuration
[ INFO ] [2019-01-23 10:20:40] com.netflix.discovery.DiscoveryClient -Shutting down DiscoveryClient ...
[ INFO ] [2019-01-23 10:20:40] com.netflix.discovery.DiscoveryClient -Completed shut down of DiscoveryClient
[ INFO ] [2019-01-23 10:20:41] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Registering beans for JMX exposure on startup
[ INFO ] [2019-01-23 10:20:41] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Bean with name 'environmentManager' has been autodetected for JMX exposure
[ INFO ] [2019-01-23 10:20:41] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Bean with name 'configurationPropertiesRebinder' has been autodetected for JMX exposure
[ INFO ] [2019-01-23 10:20:41] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Bean with name 'refreshEndpoint' has been autodetected for JMX exposure
[ INFO ] [2019-01-23 10:20:41] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Bean with name 'restartEndpoint' has been autodetected for JMX exposure
[ INFO ] [2019-01-23 10:20:41] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Bean with name 'serviceRegistryEndpoint' has been autodetected for JMX exposure
[ INFO ] [2019-01-23 10:20:41] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Bean with name 'refreshScope' has been autodetected for JMX exposure
[ INFO ] [2019-01-23 10:20:41] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Located managed bean 'environmentManager': registering with JMX server as MBean [org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager]
[ INFO ] [2019-01-23 10:20:41] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Located managed bean 'restartEndpoint': registering with JMX server as MBean [org.springframework.cloud.context.restart:name=restartEndpoint,type=RestartEndpoint]
[ INFO ] [2019-01-23 10:20:41] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Located managed bean 'serviceRegistryEndpoint': registering with JMX server as MBean [org.springframework.cloud.client.serviceregistry.endpoint:name=serviceRegistryEndpoint,type=ServiceRegistryEndpoint]
[ INFO ] [2019-01-23 10:20:42] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Located managed bean 'refreshScope': registering with JMX server as MBean [org.springframework.cloud.context.scope.refresh:name=refreshScope,type=RefreshScope]
[ INFO ] [2019-01-23 10:20:42] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Located managed bean 'configurationPropertiesRebinder': registering with JMX server as MBean [org.springframework.cloud.context.properties:name=configurationPropertiesRebinder,context=66d25ba9,type=ConfigurationPropertiesRebinder]
[ INFO ] [2019-01-23 10:20:42] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Located managed bean 'refreshEndpoint': registering with JMX server as MBean [org.springframework.cloud.endpoint:name=refreshEndpoint,type=RefreshEndpoint]
[ INFO ] [2019-01-23 10:20:42] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Registering beans for JMX exposure on startup
[ INFO ] [2019-01-23 10:20:43] org.springframework.context.support.DefaultLifecycleProcessor -Starting beans in phase 0
[ INFO ] [2019-01-23 10:20:43] org.springframework.cloud.netflix.eureka.InstanceInfoFactory -Setting initial instance status as: STARTING
[ INFO ] [2019-01-23 10:20:43] com.netflix.discovery.DiscoveryClient -Initializing Eureka in region us-east-1
[ INFO ] [2019-01-23 10:20:43] com.netflix.discovery.provider.DiscoveryJerseyProvider -Using JSON encoding codec LegacyJacksonJson
[ INFO ] [2019-01-23 10:20:44] com.netflix.discovery.provider.DiscoveryJerseyProvider -Using JSON decoding codec LegacyJacksonJson
[ INFO ] [2019-01-23 10:20:44] com.netflix.discovery.provider.DiscoveryJerseyProvider -Using XML encoding codec XStreamXml
[ INFO ] [2019-01-23 10:20:44] com.netflix.discovery.provider.DiscoveryJerseyProvider -Using XML decoding codec XStreamXml
[ INFO ] [2019-01-23 10:20:44] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver -Resolving eureka endpoints via configuration
[ INFO ] [2019-01-23 10:20:44] com.netflix.discovery.DiscoveryClient -Disable delta property : false
[ INFO ] [2019-01-23 10:20:44] com.netflix.discovery.DiscoveryClient -Single vip registry refresh property : null
[ INFO ] [2019-01-23 10:20:44] com.netflix.discovery.DiscoveryClient -Force full registry fetch : false
[ INFO ] [2019-01-23 10:20:44] com.netflix.discovery.DiscoveryClient -Application is null : false
[ INFO ] [2019-01-23 10:20:44] com.netflix.discovery.DiscoveryClient -Registered Applications size is zero : true
[ INFO ] [2019-01-23 10:20:44] com.netflix.discovery.DiscoveryClient -Application version is -1: true
[ INFO ] [2019-01-23 10:20:44] com.netflix.discovery.DiscoveryClient -Getting all instance registry info from the eureka server
[ INFO ] [2019-01-23 10:20:44] com.netflix.discovery.DiscoveryClient -The response status is 200
[ INFO ] [2019-01-23 10:20:44] com.netflix.discovery.DiscoveryClient -Starting heartbeat executor: renew interval is: 30
[ INFO ] [2019-01-23 10:20:44] com.netflix.discovery.InstanceInfoReplicator -InstanceInfoReplicator onDemand update allowed rate per min is 4
[ INFO ] [2019-01-23 10:20:44] com.netflix.discovery.DiscoveryClient -Discovery Client initialized at timestamp 1548210044536 with initial instances count: 2
[ INFO ] [2019-01-23 10:20:44] org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry -Registering application demo-user-service with eureka with status UP
[ INFO ] [2019-01-23 10:20:44] com.netflix.discovery.DiscoveryClient -Saw local status change event StatusChangeEvent [timestamp=1548210044566, current=UP, previous=STARTING]
[ INFO ] [2019-01-23 10:20:44] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'auditEventsEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=auditEventsEndpoint]
[ INFO ] [2019-01-23 10:20:44] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'archaiusEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=archaiusEndpoint]
[ INFO ] [2019-01-23 10:20:44] com.netflix.discovery.DiscoveryClient -DiscoveryClient_DEMO-USER-SERVICE/10.10.1.210:6608: registering service...
[ INFO ] [2019-01-23 10:20:44] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'featuresEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=featuresEndpoint]
[ INFO ] [2019-01-23 10:20:44] com.netflix.discovery.DiscoveryClient -DiscoveryClient_DEMO-USER-SERVICE/10.10.1.210:6608 - registration status: 204
[ INFO ] [2019-01-23 10:20:44] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'requestMappingEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=requestMappingEndpoint]
[ INFO ] [2019-01-23 10:20:44] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'environmentEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=environmentEndpoint]
[ INFO ] [2019-01-23 10:20:44] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'healthEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=healthEndpoint]
[ INFO ] [2019-01-23 10:20:44] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'beansEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=beansEndpoint]
[ INFO ] [2019-01-23 10:20:44] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'infoEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=infoEndpoint]
[ INFO ] [2019-01-23 10:20:44] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'loggersEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=loggersEndpoint]
[ INFO ] [2019-01-23 10:20:44] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'metricsEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=metricsEndpoint]
[ INFO ] [2019-01-23 10:20:44] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'traceEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=traceEndpoint]
[ INFO ] [2019-01-23 10:20:44] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'dumpEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=dumpEndpoint]
[ INFO ] [2019-01-23 10:20:44] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'autoConfigurationReportEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=autoConfigurationReportEndpoint]
[ INFO ] [2019-01-23 10:20:44] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'configurationPropertiesReportEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=configurationPropertiesReportEndpoint]
[ INFO ] [2019-01-23 10:20:44] org.springframework.context.support.DefaultLifecycleProcessor -Starting beans in phase 2147483647
[ INFO ] [2019-01-23 10:20:44] springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper -Context refreshed
[ INFO ] [2019-01-23 10:20:45] springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper -Found 1 custom documentation plugin(s)
[ INFO ] [2019-01-23 10:20:45] springfox.documentation.spring.web.scanners.ApiListingReferenceScanner -Scanning for api listing references
[ INFO ] [2019-01-23 10:20:50] org.apache.coyote.http11.Http11NioProtocol -Initializing ProtocolHandler ["http-nio-6608"]
[ INFO ] [2019-01-23 10:20:50] org.apache.coyote.http11.Http11NioProtocol -Starting ProtocolHandler ["http-nio-6608"]
[ INFO ] [2019-01-23 10:20:51] org.apache.tomcat.util.net.NioSelectorPool -Using a shared selector for servlet write/read
[ INFO ] [2019-01-23 10:20:52] org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer -Tomcat started on port(s): 6608 (http)
[ INFO ] [2019-01-23 10:20:52] org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration -Updating port to 6608
[ INFO ] [2019-01-23 10:20:52] com.demo.user.UserApplication -Started UserApplication in 53.174 seconds (JVM running for 54.847)
[ INFO ] [2019-01-23 10:25:44] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver -Resolving eureka endpoints via configuration
[ INFO ] [2019-01-23 10:31:23] org.springframework.context.annotation.AnnotationConfigApplicationContext -Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@5b068087: startup date [Wed Jan 23 10:31:23 CST 2019]; root of context hierarchy
[ INFO ] [2019-01-23 10:31:24] org.hibernate.validator.internal.util.Version -HV000001: Hibernate Validator 6.0.2.Final
[ INFO ] [2019-01-23 10:31:24] org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor -JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
[ INFO ] [2019-01-23 10:31:24] org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker -Bean 'configurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$d1dc9b21] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[ INFO ] [2019-01-23 10:31:25] org.springframework.cloud.netflix.eureka.InstanceInfoFactory -Setting initial instance status as: STARTING
[ INFO ] [2019-01-23 10:31:26] com.netflix.discovery.DiscoveryClient -Initializing Eureka in region us-east-1
[ INFO ] [2019-01-23 10:31:26] com.netflix.discovery.provider.DiscoveryJerseyProvider -Using JSON encoding codec LegacyJacksonJson
[ INFO ] [2019-01-23 10:31:26] com.netflix.discovery.provider.DiscoveryJerseyProvider -Using JSON decoding codec LegacyJacksonJson
[ INFO ] [2019-01-23 10:31:27] com.netflix.discovery.provider.DiscoveryJerseyProvider -Using XML encoding codec XStreamXml
[ INFO ] [2019-01-23 10:31:27] com.netflix.discovery.provider.DiscoveryJerseyProvider -Using XML decoding codec XStreamXml
[ INFO ] [2019-01-23 10:31:27] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver -Resolving eureka endpoints via configuration
[ INFO ] [2019-01-23 10:31:28] com.netflix.discovery.DiscoveryClient -Disable delta property : false
[ INFO ] [2019-01-23 10:31:28] com.netflix.discovery.DiscoveryClient -Single vip registry refresh property : null
[ INFO ] [2019-01-23 10:31:28] com.netflix.discovery.DiscoveryClient -Force full registry fetch : false
[ INFO ] [2019-01-23 10:31:28] com.netflix.discovery.DiscoveryClient -Application is null : false
[ INFO ] [2019-01-23 10:31:28] com.netflix.discovery.DiscoveryClient -Registered Applications size is zero : true
[ INFO ] [2019-01-23 10:31:28] com.netflix.discovery.DiscoveryClient -Application version is -1: true
[ INFO ] [2019-01-23 10:31:28] com.netflix.discovery.DiscoveryClient -Getting all instance registry info from the eureka server
[ INFO ] [2019-01-23 10:31:29] com.netflix.discovery.DiscoveryClient -The response status is 200
[ INFO ] [2019-01-23 10:31:29] com.netflix.discovery.DiscoveryClient -Not registering with Eureka server per configuration
[ INFO ] [2019-01-23 10:31:29] com.netflix.discovery.DiscoveryClient -Discovery Client initialized at timestamp 1548210689289 with initial instances count: 1
[ INFO ] [2019-01-23 10:31:30] org.springframework.cloud.config.client.ConfigServicePropertySourceLocator -Fetching config from server at: http://10.10.1.210:7742/
[ INFO ] [2019-01-23 10:31:31] org.springframework.cloud.config.client.ConfigServicePropertySourceLocator -Located environment: name=demo-user-service, global-swagger,global-db, profiles=[dev], label=master, version=null, state=null
[ INFO ] [2019-01-23 10:31:31] org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration -Located property source: CompositePropertySource [name='configService', propertySources=[MapPropertySource {name='classpath:/config/dev/global-db.yml'}, MapPropertySource {name='classpath:/config/dev/demo-user-service.yml'}]]
[ INFO ] [2019-01-23 10:31:31] com.demo.user.UserApplication -No active profile set, falling back to default profiles: default
[ INFO ] [2019-01-23 10:31:31] org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext -Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@38e83838: startup date [Wed Jan 23 10:31:31 CST 2019]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@5b068087
[ INFO ] [2019-01-23 10:31:34] org.springframework.cloud.context.scope.GenericScope -BeanFactory id=4a119542-2ba0-3219-a8fa-1d616e415c87
[ INFO ] [2019-01-23 10:31:34] org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor -JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
[ INFO ] [2019-01-23 10:31:34] org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$b5c29824] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[ INFO ] [2019-01-23 10:31:34] org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker -Bean 'org.springframework.cloud.netflix.metrics.MetricsInterceptorConfiguration$MetricsRestTemplateConfiguration' of type [org.springframework.cloud.netflix.metrics.MetricsInterceptorConfiguration$MetricsRestTemplateConfiguration$$EnhancerBySpringCGLIB$$e7ef3e65] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[ INFO ] [2019-01-23 10:31:34] org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker -Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$d1dc9b21] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[ INFO ] [2019-01-23 10:31:35] org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer -Tomcat initialized with port(s): 6608 (http)
[ INFO ] [2019-01-23 10:31:35] org.apache.catalina.core.StandardService -Starting service [Tomcat]
[ INFO ] [2019-01-23 10:31:35] org.apache.catalina.core.StandardEngine -Starting Servlet Engine: Apache Tomcat/8.5.20
[ INFO ] [2019-01-23 10:31:35] org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] -Initializing Spring embedded WebApplicationContext
[ INFO ] [2019-01-23 10:31:35] org.springframework.web.context.ContextLoader -Root WebApplicationContext: initialization completed in 4209 ms
[ INFO ] [2019-01-23 10:31:36] org.springframework.boot.web.servlet.ServletRegistrationBean -Mapping servlet: 'dispatcherServlet' to [/]
[ INFO ] [2019-01-23 10:31:36] org.springframework.boot.web.servlet.ServletRegistrationBean -Mapping servlet: 'statViewServlet' to [/druid/*]
[ INFO ] [2019-01-23 10:31:36] org.springframework.boot.web.servlet.FilterRegistrationBean -Mapping filter: 'metricsFilter' to: [/*]
[ INFO ] [2019-01-23 10:31:36] org.springframework.boot.web.servlet.FilterRegistrationBean -Mapping filter: 'characterEncodingFilter' to: [/*]
[ INFO ] [2019-01-23 10:31:36] org.springframework.boot.web.servlet.FilterRegistrationBean -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
[ INFO ] [2019-01-23 10:31:36] org.springframework.boot.web.servlet.FilterRegistrationBean -Mapping filter: 'httpPutFormContentFilter' to: [/*]
[ INFO ] [2019-01-23 10:31:36] org.springframework.boot.web.servlet.FilterRegistrationBean -Mapping filter: 'requestContextFilter' to: [/*]
[ INFO ] [2019-01-23 10:31:36] org.springframework.boot.web.servlet.FilterRegistrationBean -Mapping filter: 'webRequestLoggingFilter' to: [/*]
[ INFO ] [2019-01-23 10:31:36] org.springframework.boot.web.servlet.FilterRegistrationBean -Mapping filter: 'webStatFilter' to urls: [/*]
[ INFO ] [2019-01-23 10:31:36] org.springframework.boot.web.servlet.FilterRegistrationBean -Mapping filter: 'applicationContextIdFilter' to: [/*]
[ INFO ] [2019-01-23 10:31:38] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -Mapped "{[/user/queryUserById],methods=[POST],consumes=[application/json;charset=UTF-8],produces=[application/json;charset=UTF-8]}" onto public com.demo.common.structure.ResultBean<com.demo.user.api.dto.rsp.UserDto> com.demo.user.controller.UserControllerImpl.queryUserById(com.demo.user.api.dto.req.QueryShopById)
[ INFO ] [2019-01-23 10:31:38] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -Mapped "{[/user/queryUserDto],methods=[POST],consumes=[application/json;charset=UTF-8],produces=[application/json;charset=UTF-8]}" onto public com.demo.common.structure.ResultPageBean<java.util.List<com.demo.user.api.dto.rsp.UserDto>> com.demo.user.controller.UserControllerImpl.queryUserDto(com.demo.user.api.dto.req.QueryUserReq)
[ INFO ] [2019-01-23 10:31:38] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
[ INFO ] [2019-01-23 10:31:38] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
[ INFO ] [2019-01-23 10:31:38] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
[ INFO ] [2019-01-23 10:31:38] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
[ INFO ] [2019-01-23 10:31:38] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
[ INFO ] [2019-01-23 10:31:38] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
[ INFO ] [2019-01-23 10:31:39] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/auditevents || /auditevents.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public org.springframework.http.ResponseEntity<?> org.springframework.boot.actuate.endpoint.mvc.AuditEventsMvcEndpoint.findByPrincipalAndAfterAndType(java.lang.String,java.util.Date,java.lang.String)
[ INFO ] [2019-01-23 10:31:39] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/restart || /restart.json],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.context.restart.RestartMvcEndpoint.invoke()
[ INFO ] [2019-01-23 10:31:39] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/configprops || /configprops.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 10:31:39] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/env],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.context.environment.EnvironmentManagerMvcEndpoint.value(java.util.Map<java.lang.String, java.lang.String>)
[ INFO ] [2019-01-23 10:31:39] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/env/reset],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> org.springframework.cloud.context.environment.EnvironmentManagerMvcEndpoint.reset()
[ INFO ] [2019-01-23 10:31:39] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/refresh || /refresh.json],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.endpoint.GenericPostableMvcEndpoint.invoke()
[ INFO ] [2019-01-23 10:31:39] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/metrics/{name:.*}],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.MetricsMvcEndpoint.value(java.lang.String)
[ INFO ] [2019-01-23 10:31:39] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/metrics || /metrics.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 10:31:39] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/trace || /trace.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 10:31:39] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/loggers/{name:.*}],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.LoggersMvcEndpoint.get(java.lang.String)
[ INFO ] [2019-01-23 10:31:39] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/loggers/{name:.*}],methods=[POST],consumes=[application/vnd.spring-boot.actuator.v1+json || application/json],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.LoggersMvcEndpoint.set(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)
[ INFO ] [2019-01-23 10:31:39] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/loggers || /loggers.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 10:31:39] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/health || /health.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint.invoke(javax.servlet.http.HttpServletRequest,java.security.Principal)
[ INFO ] [2019-01-23 10:31:39] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/service-registry/instance-status],methods=[POST]}" onto public org.springframework.http.ResponseEntity<?> org.springframework.cloud.client.serviceregistry.endpoint.ServiceRegistryEndpoint.setStatus(java.lang.String)
[ INFO ] [2019-01-23 10:31:39] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/service-registry/instance-status],methods=[GET]}" onto public org.springframework.http.ResponseEntity org.springframework.cloud.client.serviceregistry.endpoint.ServiceRegistryEndpoint.getStatus()
[ INFO ] [2019-01-23 10:31:39] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/dump || /dump.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 10:31:39] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/env/{name:.*}],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EnvironmentMvcEndpoint.value(java.lang.String)
[ INFO ] [2019-01-23 10:31:39] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/env || /env.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 10:31:39] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/features || /features.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 10:31:39] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/archaius || /archaius.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 10:31:39] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/mappings || /mappings.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 10:31:39] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/autoconfig || /autoconfig.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 10:31:39] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/info || /info.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 10:31:39] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/heapdump || /heapdump.json],methods=[GET],produces=[application/octet-stream]}" onto public void org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpoint.invoke(boolean,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.io.IOException,javax.servlet.ServletException
[ INFO ] [2019-01-23 10:31:39] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/beans || /beans.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 10:31:39] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/pause || /pause.json],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.endpoint.GenericPostableMvcEndpoint.invoke()
[ INFO ] [2019-01-23 10:31:39] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/resume || /resume.json],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.endpoint.GenericPostableMvcEndpoint.invoke()
[ WARN ] [2019-01-23 10:31:40] com.netflix.config.sources.URLConfigurationSource -No URLs will be polled as dynamic configuration sources.
[ INFO ] [2019-01-23 10:31:40] com.netflix.config.sources.URLConfigurationSource -To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[ WARN ] [2019-01-23 10:31:40] com.netflix.config.sources.URLConfigurationSource -No URLs will be polled as dynamic configuration sources.
[ INFO ] [2019-01-23 10:31:40] com.netflix.config.sources.URLConfigurationSource -To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[ INFO ] [2019-01-23 10:31:40] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter -Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@38e83838: startup date [Wed Jan 23 10:31:31 CST 2019]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@5b068087
[ INFO ] [2019-01-23 10:31:40] org.springframework.web.servlet.handler.SimpleUrlHandlerMapping -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
[ INFO ] [2019-01-23 10:31:40] org.springframework.web.servlet.handler.SimpleUrlHandlerMapping -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
[ INFO ] [2019-01-23 10:31:41] org.springframework.web.servlet.handler.SimpleUrlHandlerMapping -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
[ INFO ] [2019-01-23 10:31:42] org.springframework.ui.freemarker.SpringTemplateLoader -SpringTemplateLoader for FreeMarker: using resource loader [org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@38e83838: startup date [Wed Jan 23 10:31:31 CST 2019]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@5b068087] and template loader path [classpath:/templates/]
[ INFO ] [2019-01-23 10:31:42] org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer -ClassTemplateLoader for Spring macros added to FreeMarker configuration
[ INFO ] [2019-01-23 10:31:42] com.netflix.discovery.DiscoveryClient -Shutting down DiscoveryClient ...
[ INFO ] [2019-01-23 10:31:42] com.netflix.discovery.DiscoveryClient -Completed shut down of DiscoveryClient
[ INFO ] [2019-01-23 10:31:43] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Registering beans for JMX exposure on startup
[ INFO ] [2019-01-23 10:31:43] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Bean with name 'environmentManager' has been autodetected for JMX exposure
[ INFO ] [2019-01-23 10:31:43] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Bean with name 'configurationPropertiesRebinder' has been autodetected for JMX exposure
[ INFO ] [2019-01-23 10:31:43] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Bean with name 'refreshEndpoint' has been autodetected for JMX exposure
[ INFO ] [2019-01-23 10:31:43] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Bean with name 'restartEndpoint' has been autodetected for JMX exposure
[ INFO ] [2019-01-23 10:31:43] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Bean with name 'serviceRegistryEndpoint' has been autodetected for JMX exposure
[ INFO ] [2019-01-23 10:31:43] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Bean with name 'refreshScope' has been autodetected for JMX exposure
[ INFO ] [2019-01-23 10:31:43] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Located managed bean 'environmentManager': registering with JMX server as MBean [org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager]
[ INFO ] [2019-01-23 10:31:43] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Located managed bean 'restartEndpoint': registering with JMX server as MBean [org.springframework.cloud.context.restart:name=restartEndpoint,type=RestartEndpoint]
[ INFO ] [2019-01-23 10:31:43] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Located managed bean 'serviceRegistryEndpoint': registering with JMX server as MBean [org.springframework.cloud.client.serviceregistry.endpoint:name=serviceRegistryEndpoint,type=ServiceRegistryEndpoint]
[ INFO ] [2019-01-23 10:31:43] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Located managed bean 'refreshScope': registering with JMX server as MBean [org.springframework.cloud.context.scope.refresh:name=refreshScope,type=RefreshScope]
[ INFO ] [2019-01-23 10:31:43] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Located managed bean 'configurationPropertiesRebinder': registering with JMX server as MBean [org.springframework.cloud.context.properties:name=configurationPropertiesRebinder,context=38e83838,type=ConfigurationPropertiesRebinder]
[ INFO ] [2019-01-23 10:31:43] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Located managed bean 'refreshEndpoint': registering with JMX server as MBean [org.springframework.cloud.endpoint:name=refreshEndpoint,type=RefreshEndpoint]
[ INFO ] [2019-01-23 10:31:43] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Registering beans for JMX exposure on startup
[ INFO ] [2019-01-23 10:31:44] org.springframework.context.support.DefaultLifecycleProcessor -Starting beans in phase 0
[ INFO ] [2019-01-23 10:31:44] org.springframework.cloud.netflix.eureka.InstanceInfoFactory -Setting initial instance status as: STARTING
[ INFO ] [2019-01-23 10:31:44] com.netflix.discovery.DiscoveryClient -Initializing Eureka in region us-east-1
[ INFO ] [2019-01-23 10:31:44] com.netflix.discovery.provider.DiscoveryJerseyProvider -Using JSON encoding codec LegacyJacksonJson
[ INFO ] [2019-01-23 10:31:44] com.netflix.discovery.provider.DiscoveryJerseyProvider -Using JSON decoding codec LegacyJacksonJson
[ INFO ] [2019-01-23 10:31:44] com.netflix.discovery.provider.DiscoveryJerseyProvider -Using XML encoding codec XStreamXml
[ INFO ] [2019-01-23 10:31:44] com.netflix.discovery.provider.DiscoveryJerseyProvider -Using XML decoding codec XStreamXml
[ INFO ] [2019-01-23 10:31:44] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver -Resolving eureka endpoints via configuration
[ INFO ] [2019-01-23 10:31:44] com.netflix.discovery.DiscoveryClient -Disable delta property : false
[ INFO ] [2019-01-23 10:31:44] com.netflix.discovery.DiscoveryClient -Single vip registry refresh property : null
[ INFO ] [2019-01-23 10:31:44] com.netflix.discovery.DiscoveryClient -Force full registry fetch : false
[ INFO ] [2019-01-23 10:31:44] com.netflix.discovery.DiscoveryClient -Application is null : false
[ INFO ] [2019-01-23 10:31:44] com.netflix.discovery.DiscoveryClient -Registered Applications size is zero : true
[ INFO ] [2019-01-23 10:31:44] com.netflix.discovery.DiscoveryClient -Application version is -1: true
[ INFO ] [2019-01-23 10:31:44] com.netflix.discovery.DiscoveryClient -Getting all instance registry info from the eureka server
[ INFO ] [2019-01-23 10:31:44] com.netflix.discovery.DiscoveryClient -The response status is 200
[ INFO ] [2019-01-23 10:31:44] com.netflix.discovery.DiscoveryClient -Starting heartbeat executor: renew interval is: 30
[ INFO ] [2019-01-23 10:31:44] com.netflix.discovery.InstanceInfoReplicator -InstanceInfoReplicator onDemand update allowed rate per min is 4
[ INFO ] [2019-01-23 10:31:44] com.netflix.discovery.DiscoveryClient -Discovery Client initialized at timestamp 1548210704536 with initial instances count: 1
[ INFO ] [2019-01-23 10:31:44] org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry -Registering application demo-user-service with eureka with status UP
[ INFO ] [2019-01-23 10:31:44] com.netflix.discovery.DiscoveryClient -Saw local status change event StatusChangeEvent [timestamp=1548210704639, current=UP, previous=STARTING]
[ INFO ] [2019-01-23 10:31:44] com.netflix.discovery.DiscoveryClient -DiscoveryClient_DEMO-USER-SERVICE/10.10.1.210:6608: registering service...
[ INFO ] [2019-01-23 10:31:44] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'auditEventsEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=auditEventsEndpoint]
[ INFO ] [2019-01-23 10:31:44] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'archaiusEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=archaiusEndpoint]
[ INFO ] [2019-01-23 10:31:44] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'featuresEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=featuresEndpoint]
[ INFO ] [2019-01-23 10:31:44] com.netflix.discovery.DiscoveryClient -DiscoveryClient_DEMO-USER-SERVICE/10.10.1.210:6608 - registration status: 204
[ INFO ] [2019-01-23 10:31:44] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'requestMappingEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=requestMappingEndpoint]
[ INFO ] [2019-01-23 10:31:44] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'environmentEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=environmentEndpoint]
[ INFO ] [2019-01-23 10:31:44] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'healthEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=healthEndpoint]
[ INFO ] [2019-01-23 10:31:44] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'beansEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=beansEndpoint]
[ INFO ] [2019-01-23 10:31:44] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'infoEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=infoEndpoint]
[ INFO ] [2019-01-23 10:31:44] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'loggersEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=loggersEndpoint]
[ INFO ] [2019-01-23 10:31:44] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'metricsEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=metricsEndpoint]
[ INFO ] [2019-01-23 10:31:44] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'traceEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=traceEndpoint]
[ INFO ] [2019-01-23 10:31:44] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'dumpEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=dumpEndpoint]
[ INFO ] [2019-01-23 10:31:44] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'autoConfigurationReportEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=autoConfigurationReportEndpoint]
[ INFO ] [2019-01-23 10:31:44] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'configurationPropertiesReportEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=configurationPropertiesReportEndpoint]
[ INFO ] [2019-01-23 10:31:44] org.springframework.context.support.DefaultLifecycleProcessor -Starting beans in phase 2147483647
[ INFO ] [2019-01-23 10:31:44] springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper -Context refreshed
[ INFO ] [2019-01-23 10:31:44] springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper -Found 1 custom documentation plugin(s)
[ INFO ] [2019-01-23 10:31:44] springfox.documentation.spring.web.scanners.ApiListingReferenceScanner -Scanning for api listing references
[ INFO ] [2019-01-23 10:31:45] org.apache.coyote.http11.Http11NioProtocol -Initializing ProtocolHandler ["http-nio-6608"]
[ INFO ] [2019-01-23 10:31:45] org.apache.coyote.http11.Http11NioProtocol -Starting ProtocolHandler ["http-nio-6608"]
[ INFO ] [2019-01-23 10:31:45] org.apache.tomcat.util.net.NioSelectorPool -Using a shared selector for servlet write/read
[ INFO ] [2019-01-23 10:31:45] org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer -Tomcat started on port(s): 6608 (http)
[ INFO ] [2019-01-23 10:31:45] org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration -Updating port to 6608
[ INFO ] [2019-01-23 10:31:45] com.demo.user.UserApplication -Started UserApplication in 22.872 seconds (JVM running for 25.044)
[ INFO ] [2019-01-23 10:36:13] org.springframework.context.annotation.AnnotationConfigApplicationContext -Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@5b068087: startup date [Wed Jan 23 10:36:13 CST 2019]; root of context hierarchy
[ INFO ] [2019-01-23 10:36:14] org.hibernate.validator.internal.util.Version -HV000001: Hibernate Validator 6.0.2.Final
[ INFO ] [2019-01-23 10:36:14] org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor -JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
[ INFO ] [2019-01-23 10:36:14] org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker -Bean 'configurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$a644cd7e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[ INFO ] [2019-01-23 10:36:15] org.springframework.cloud.netflix.eureka.InstanceInfoFactory -Setting initial instance status as: STARTING
[ INFO ] [2019-01-23 10:36:15] com.netflix.discovery.DiscoveryClient -Initializing Eureka in region us-east-1
[ INFO ] [2019-01-23 10:36:16] com.netflix.discovery.provider.DiscoveryJerseyProvider -Using JSON encoding codec LegacyJacksonJson
[ INFO ] [2019-01-23 10:36:16] com.netflix.discovery.provider.DiscoveryJerseyProvider -Using JSON decoding codec LegacyJacksonJson
[ INFO ] [2019-01-23 10:36:16] com.netflix.discovery.provider.DiscoveryJerseyProvider -Using XML encoding codec XStreamXml
[ INFO ] [2019-01-23 10:36:16] com.netflix.discovery.provider.DiscoveryJerseyProvider -Using XML decoding codec XStreamXml
[ INFO ] [2019-01-23 10:36:17] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver -Resolving eureka endpoints via configuration
[ INFO ] [2019-01-23 10:36:17] com.netflix.discovery.DiscoveryClient -Disable delta property : false
[ INFO ] [2019-01-23 10:36:17] com.netflix.discovery.DiscoveryClient -Single vip registry refresh property : null
[ INFO ] [2019-01-23 10:36:17] com.netflix.discovery.DiscoveryClient -Force full registry fetch : false
[ INFO ] [2019-01-23 10:36:17] com.netflix.discovery.DiscoveryClient -Application is null : false
[ INFO ] [2019-01-23 10:36:17] com.netflix.discovery.DiscoveryClient -Registered Applications size is zero : true
[ INFO ] [2019-01-23 10:36:17] com.netflix.discovery.DiscoveryClient -Application version is -1: true
[ INFO ] [2019-01-23 10:36:17] com.netflix.discovery.DiscoveryClient -Getting all instance registry info from the eureka server
[ INFO ] [2019-01-23 10:36:17] com.netflix.discovery.DiscoveryClient -The response status is 200
[ INFO ] [2019-01-23 10:36:17] com.netflix.discovery.DiscoveryClient -Not registering with Eureka server per configuration
[ INFO ] [2019-01-23 10:36:17] com.netflix.discovery.DiscoveryClient -Discovery Client initialized at timestamp 1548210977546 with initial instances count: 3
[ INFO ] [2019-01-23 10:36:18] org.springframework.cloud.config.client.ConfigServicePropertySourceLocator -Fetching config from server at: http://10.10.1.210:7742/
[ INFO ] [2019-01-23 10:36:18] org.springframework.cloud.config.client.ConfigServicePropertySourceLocator -Located environment: name=demo-user-service, global-swagger,global-db, profiles=[dev], label=master, version=null, state=null
[ INFO ] [2019-01-23 10:36:18] org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration -Located property source: CompositePropertySource [name='configService', propertySources=[MapPropertySource {name='classpath:/config/dev/global-db.yml'}, MapPropertySource {name='classpath:/config/dev/demo-user-service.yml'}]]
[ INFO ] [2019-01-23 10:36:18] com.demo.user.UserApplication -No active profile set, falling back to default profiles: default
[ INFO ] [2019-01-23 10:36:18] org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext -Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@4e4162bc: startup date [Wed Jan 23 10:36:18 CST 2019]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@5b068087
[ INFO ] [2019-01-23 10:36:22] org.springframework.cloud.context.scope.GenericScope -BeanFactory id=4a119542-2ba0-3219-a8fa-1d616e415c87
[ INFO ] [2019-01-23 10:36:22] org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor -JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
[ INFO ] [2019-01-23 10:36:22] org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$8a2aca81] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[ INFO ] [2019-01-23 10:36:22] org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker -Bean 'org.springframework.cloud.netflix.metrics.MetricsInterceptorConfiguration$MetricsRestTemplateConfiguration' of type [org.springframework.cloud.netflix.metrics.MetricsInterceptorConfiguration$MetricsRestTemplateConfiguration$$EnhancerBySpringCGLIB$$bc5770c2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[ INFO ] [2019-01-23 10:36:22] org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker -Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$a644cd7e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[ INFO ] [2019-01-23 10:36:23] org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer -Tomcat initialized with port(s): 6608 (http)
[ INFO ] [2019-01-23 10:36:23] org.apache.catalina.core.StandardService -Starting service [Tomcat]
[ INFO ] [2019-01-23 10:36:23] org.apache.catalina.core.StandardEngine -Starting Servlet Engine: Apache Tomcat/8.5.20
[ INFO ] [2019-01-23 10:36:23] org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] -Initializing Spring embedded WebApplicationContext
[ INFO ] [2019-01-23 10:36:23] org.springframework.web.context.ContextLoader -Root WebApplicationContext: initialization completed in 5317 ms
[ INFO ] [2019-01-23 10:36:24] org.springframework.boot.web.servlet.ServletRegistrationBean -Mapping servlet: 'dispatcherServlet' to [/]
[ INFO ] [2019-01-23 10:36:24] org.springframework.boot.web.servlet.ServletRegistrationBean -Mapping servlet: 'statViewServlet' to [/druid/*]
[ INFO ] [2019-01-23 10:36:24] org.springframework.boot.web.servlet.FilterRegistrationBean -Mapping filter: 'metricsFilter' to: [/*]
[ INFO ] [2019-01-23 10:36:24] org.springframework.boot.web.servlet.FilterRegistrationBean -Mapping filter: 'characterEncodingFilter' to: [/*]
[ INFO ] [2019-01-23 10:36:24] org.springframework.boot.web.servlet.FilterRegistrationBean -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
[ INFO ] [2019-01-23 10:36:24] org.springframework.boot.web.servlet.FilterRegistrationBean -Mapping filter: 'httpPutFormContentFilter' to: [/*]
[ INFO ] [2019-01-23 10:36:24] org.springframework.boot.web.servlet.FilterRegistrationBean -Mapping filter: 'requestContextFilter' to: [/*]
[ INFO ] [2019-01-23 10:36:24] org.springframework.boot.web.servlet.FilterRegistrationBean -Mapping filter: 'webRequestLoggingFilter' to: [/*]
[ INFO ] [2019-01-23 10:36:24] org.springframework.boot.web.servlet.FilterRegistrationBean -Mapping filter: 'webStatFilter' to urls: [/*]
[ INFO ] [2019-01-23 10:36:24] org.springframework.boot.web.servlet.FilterRegistrationBean -Mapping filter: 'applicationContextIdFilter' to: [/*]
[ INFO ] [2019-01-23 10:36:27] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -Mapped "{[/user/queryUserDto],methods=[POST],consumes=[application/json;charset=UTF-8],produces=[application/json;charset=UTF-8]}" onto public com.demo.common.structure.ResultPageBean<java.util.List<com.demo.user.api.dto.rsp.UserDto>> com.demo.user.controller.UserControllerImpl.queryUserDto(com.demo.user.api.dto.req.QueryUserReq)
[ INFO ] [2019-01-23 10:36:27] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -Mapped "{[/user/queryUserById],methods=[POST],consumes=[application/json;charset=UTF-8],produces=[application/json;charset=UTF-8]}" onto public com.demo.common.structure.ResultBean<com.demo.user.api.dto.rsp.UserDto> com.demo.user.controller.UserControllerImpl.queryUserById(com.demo.user.api.dto.req.QueryShopById)
[ INFO ] [2019-01-23 10:36:27] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
[ INFO ] [2019-01-23 10:36:27] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
[ INFO ] [2019-01-23 10:36:27] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
[ INFO ] [2019-01-23 10:36:27] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
[ INFO ] [2019-01-23 10:36:27] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
[ INFO ] [2019-01-23 10:36:27] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
[ INFO ] [2019-01-23 10:36:28] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/beans || /beans.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 10:36:28] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/heapdump || /heapdump.json],methods=[GET],produces=[application/octet-stream]}" onto public void org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpoint.invoke(boolean,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.io.IOException,javax.servlet.ServletException
[ INFO ] [2019-01-23 10:36:28] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/trace || /trace.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 10:36:28] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/pause || /pause.json],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.endpoint.GenericPostableMvcEndpoint.invoke()
[ INFO ] [2019-01-23 10:36:28] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/resume || /resume.json],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.endpoint.GenericPostableMvcEndpoint.invoke()
[ INFO ] [2019-01-23 10:36:28] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/loggers/{name:.*}],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.LoggersMvcEndpoint.get(java.lang.String)
[ INFO ] [2019-01-23 10:36:28] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/loggers/{name:.*}],methods=[POST],consumes=[application/vnd.spring-boot.actuator.v1+json || application/json],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.LoggersMvcEndpoint.set(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)
[ INFO ] [2019-01-23 10:36:28] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/loggers || /loggers.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 10:36:28] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/features || /features.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 10:36:28] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/autoconfig || /autoconfig.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 10:36:28] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/metrics/{name:.*}],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.MetricsMvcEndpoint.value(java.lang.String)
[ INFO ] [2019-01-23 10:36:28] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/metrics || /metrics.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 10:36:28] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/health || /health.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint.invoke(javax.servlet.http.HttpServletRequest,java.security.Principal)
[ INFO ] [2019-01-23 10:36:28] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/restart || /restart.json],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.context.restart.RestartMvcEndpoint.invoke()
[ INFO ] [2019-01-23 10:36:28] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/env/{name:.*}],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EnvironmentMvcEndpoint.value(java.lang.String)
[ INFO ] [2019-01-23 10:36:28] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/env || /env.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 10:36:28] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/env],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.context.environment.EnvironmentManagerMvcEndpoint.value(java.util.Map<java.lang.String, java.lang.String>)
[ INFO ] [2019-01-23 10:36:28] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/env/reset],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> org.springframework.cloud.context.environment.EnvironmentManagerMvcEndpoint.reset()
[ INFO ] [2019-01-23 10:36:28] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/configprops || /configprops.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 10:36:28] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/auditevents || /auditevents.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public org.springframework.http.ResponseEntity<?> org.springframework.boot.actuate.endpoint.mvc.AuditEventsMvcEndpoint.findByPrincipalAndAfterAndType(java.lang.String,java.util.Date,java.lang.String)
[ INFO ] [2019-01-23 10:36:28] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/info || /info.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 10:36:28] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/refresh || /refresh.json],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.endpoint.GenericPostableMvcEndpoint.invoke()
[ INFO ] [2019-01-23 10:36:28] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/archaius || /archaius.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 10:36:28] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/mappings || /mappings.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 10:36:28] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/dump || /dump.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 10:36:28] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/service-registry/instance-status],methods=[GET]}" onto public org.springframework.http.ResponseEntity org.springframework.cloud.client.serviceregistry.endpoint.ServiceRegistryEndpoint.getStatus()
[ INFO ] [2019-01-23 10:36:28] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/service-registry/instance-status],methods=[POST]}" onto public org.springframework.http.ResponseEntity<?> org.springframework.cloud.client.serviceregistry.endpoint.ServiceRegistryEndpoint.setStatus(java.lang.String)
[ WARN ] [2019-01-23 10:36:29] com.netflix.config.sources.URLConfigurationSource -No URLs will be polled as dynamic configuration sources.
[ INFO ] [2019-01-23 10:36:29] com.netflix.config.sources.URLConfigurationSource -To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[ WARN ] [2019-01-23 10:36:29] com.netflix.config.sources.URLConfigurationSource -No URLs will be polled as dynamic configuration sources.
[ INFO ] [2019-01-23 10:36:29] com.netflix.config.sources.URLConfigurationSource -To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[ INFO ] [2019-01-23 10:36:29] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter -Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@4e4162bc: startup date [Wed Jan 23 10:36:18 CST 2019]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@5b068087
[ INFO ] [2019-01-23 10:36:29] org.springframework.web.servlet.handler.SimpleUrlHandlerMapping -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
[ INFO ] [2019-01-23 10:36:29] org.springframework.web.servlet.handler.SimpleUrlHandlerMapping -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
[ INFO ] [2019-01-23 10:36:30] org.springframework.web.servlet.handler.SimpleUrlHandlerMapping -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
[ INFO ] [2019-01-23 10:36:31] org.springframework.ui.freemarker.SpringTemplateLoader -SpringTemplateLoader for FreeMarker: using resource loader [org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@4e4162bc: startup date [Wed Jan 23 10:36:18 CST 2019]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@5b068087] and template loader path [classpath:/templates/]
[ INFO ] [2019-01-23 10:36:31] org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer -ClassTemplateLoader for Spring macros added to FreeMarker configuration
[ INFO ] [2019-01-23 10:36:31] com.netflix.discovery.DiscoveryClient -Shutting down DiscoveryClient ...
[ INFO ] [2019-01-23 10:36:31] com.netflix.discovery.DiscoveryClient -Completed shut down of DiscoveryClient
[ INFO ] [2019-01-23 10:36:32] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Registering beans for JMX exposure on startup
[ INFO ] [2019-01-23 10:36:32] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Bean with name 'environmentManager' has been autodetected for JMX exposure
[ INFO ] [2019-01-23 10:36:32] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Bean with name 'configurationPropertiesRebinder' has been autodetected for JMX exposure
[ INFO ] [2019-01-23 10:36:32] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Bean with name 'refreshEndpoint' has been autodetected for JMX exposure
[ INFO ] [2019-01-23 10:36:32] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Bean with name 'restartEndpoint' has been autodetected for JMX exposure
[ INFO ] [2019-01-23 10:36:32] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Bean with name 'serviceRegistryEndpoint' has been autodetected for JMX exposure
[ INFO ] [2019-01-23 10:36:32] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Bean with name 'refreshScope' has been autodetected for JMX exposure
[ INFO ] [2019-01-23 10:36:32] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Located managed bean 'environmentManager': registering with JMX server as MBean [org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager]
[ INFO ] [2019-01-23 10:36:32] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Located managed bean 'restartEndpoint': registering with JMX server as MBean [org.springframework.cloud.context.restart:name=restartEndpoint,type=RestartEndpoint]
[ INFO ] [2019-01-23 10:36:32] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Located managed bean 'serviceRegistryEndpoint': registering with JMX server as MBean [org.springframework.cloud.client.serviceregistry.endpoint:name=serviceRegistryEndpoint,type=ServiceRegistryEndpoint]
[ INFO ] [2019-01-23 10:36:32] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Located managed bean 'refreshScope': registering with JMX server as MBean [org.springframework.cloud.context.scope.refresh:name=refreshScope,type=RefreshScope]
[ INFO ] [2019-01-23 10:36:32] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Located managed bean 'configurationPropertiesRebinder': registering with JMX server as MBean [org.springframework.cloud.context.properties:name=configurationPropertiesRebinder,context=4e4162bc,type=ConfigurationPropertiesRebinder]
[ INFO ] [2019-01-23 10:36:32] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Located managed bean 'refreshEndpoint': registering with JMX server as MBean [org.springframework.cloud.endpoint:name=refreshEndpoint,type=RefreshEndpoint]
[ INFO ] [2019-01-23 10:36:32] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Registering beans for JMX exposure on startup
[ INFO ] [2019-01-23 10:36:33] org.springframework.context.support.DefaultLifecycleProcessor -Starting beans in phase 0
[ INFO ] [2019-01-23 10:36:33] org.springframework.cloud.netflix.eureka.InstanceInfoFactory -Setting initial instance status as: STARTING
[ INFO ] [2019-01-23 10:36:33] com.netflix.discovery.DiscoveryClient -Initializing Eureka in region us-east-1
[ INFO ] [2019-01-23 10:36:33] com.netflix.discovery.provider.DiscoveryJerseyProvider -Using JSON encoding codec LegacyJacksonJson
[ INFO ] [2019-01-23 10:36:33] com.netflix.discovery.provider.DiscoveryJerseyProvider -Using JSON decoding codec LegacyJacksonJson
[ INFO ] [2019-01-23 10:36:33] com.netflix.discovery.provider.DiscoveryJerseyProvider -Using XML encoding codec XStreamXml
[ INFO ] [2019-01-23 10:36:33] com.netflix.discovery.provider.DiscoveryJerseyProvider -Using XML decoding codec XStreamXml
[ INFO ] [2019-01-23 10:36:34] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver -Resolving eureka endpoints via configuration
[ INFO ] [2019-01-23 10:36:34] com.netflix.discovery.DiscoveryClient -Disable delta property : false
[ INFO ] [2019-01-23 10:36:34] com.netflix.discovery.DiscoveryClient -Single vip registry refresh property : null
[ INFO ] [2019-01-23 10:36:34] com.netflix.discovery.DiscoveryClient -Force full registry fetch : false
[ INFO ] [2019-01-23 10:36:34] com.netflix.discovery.DiscoveryClient -Application is null : false
[ INFO ] [2019-01-23 10:36:34] com.netflix.discovery.DiscoveryClient -Registered Applications size is zero : true
[ INFO ] [2019-01-23 10:36:34] com.netflix.discovery.DiscoveryClient -Application version is -1: true
[ INFO ] [2019-01-23 10:36:34] com.netflix.discovery.DiscoveryClient -Getting all instance registry info from the eureka server
[ INFO ] [2019-01-23 10:36:34] com.netflix.discovery.DiscoveryClient -The response status is 200
[ INFO ] [2019-01-23 10:36:34] com.netflix.discovery.DiscoveryClient -Starting heartbeat executor: renew interval is: 30
[ INFO ] [2019-01-23 10:36:34] com.netflix.discovery.InstanceInfoReplicator -InstanceInfoReplicator onDemand update allowed rate per min is 4
[ INFO ] [2019-01-23 10:36:34] com.netflix.discovery.DiscoveryClient -Discovery Client initialized at timestamp 1548210994198 with initial instances count: 4
[ INFO ] [2019-01-23 10:36:34] org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry -Registering application demo-user-service with eureka with status UP
[ INFO ] [2019-01-23 10:36:34] com.netflix.discovery.DiscoveryClient -Saw local status change event StatusChangeEvent [timestamp=1548210994278, current=UP, previous=STARTING]
[ INFO ] [2019-01-23 10:36:34] com.netflix.discovery.DiscoveryClient -DiscoveryClient_DEMO-USER-SERVICE/10.10.1.210:6608: registering service...
[ INFO ] [2019-01-23 10:36:34] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'auditEventsEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=auditEventsEndpoint]
[ INFO ] [2019-01-23 10:36:34] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'archaiusEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=archaiusEndpoint]
[ INFO ] [2019-01-23 10:36:34] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'featuresEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=featuresEndpoint]
[ INFO ] [2019-01-23 10:36:34] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'requestMappingEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=requestMappingEndpoint]
[ INFO ] [2019-01-23 10:36:34] com.netflix.discovery.DiscoveryClient -DiscoveryClient_DEMO-USER-SERVICE/10.10.1.210:6608 - registration status: 204
[ INFO ] [2019-01-23 10:36:34] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'environmentEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=environmentEndpoint]
[ INFO ] [2019-01-23 10:36:34] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'healthEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=healthEndpoint]
[ INFO ] [2019-01-23 10:36:34] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'beansEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=beansEndpoint]
[ INFO ] [2019-01-23 10:36:34] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'infoEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=infoEndpoint]
[ INFO ] [2019-01-23 10:36:34] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'loggersEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=loggersEndpoint]
[ INFO ] [2019-01-23 10:36:34] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'metricsEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=metricsEndpoint]
[ INFO ] [2019-01-23 10:36:34] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'traceEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=traceEndpoint]
[ INFO ] [2019-01-23 10:36:34] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'dumpEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=dumpEndpoint]
[ INFO ] [2019-01-23 10:36:34] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'autoConfigurationReportEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=autoConfigurationReportEndpoint]
[ INFO ] [2019-01-23 10:36:34] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'configurationPropertiesReportEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=configurationPropertiesReportEndpoint]
[ INFO ] [2019-01-23 10:36:34] org.springframework.context.support.DefaultLifecycleProcessor -Starting beans in phase 2147483647
[ INFO ] [2019-01-23 10:36:34] springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper -Context refreshed
[ INFO ] [2019-01-23 10:36:34] springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper -Found 1 custom documentation plugin(s)
[ INFO ] [2019-01-23 10:36:34] springfox.documentation.spring.web.scanners.ApiListingReferenceScanner -Scanning for api listing references
[ INFO ] [2019-01-23 10:36:34] org.apache.coyote.http11.Http11NioProtocol -Initializing ProtocolHandler ["http-nio-6608"]
[ INFO ] [2019-01-23 10:36:34] org.apache.coyote.http11.Http11NioProtocol -Starting ProtocolHandler ["http-nio-6608"]
[ INFO ] [2019-01-23 10:36:34] org.apache.tomcat.util.net.NioSelectorPool -Using a shared selector for servlet write/read
[ INFO ] [2019-01-23 10:36:34] org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer -Tomcat started on port(s): 6608 (http)
[ INFO ] [2019-01-23 10:36:34] org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration -Updating port to 6608
[ INFO ] [2019-01-23 10:36:34] com.demo.user.UserApplication -Started UserApplication in 21.857 seconds (JVM running for 22.877)
[ INFO ] [2019-01-23 10:37:05] org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] -Initializing Spring FrameworkServlet 'dispatcherServlet'
[ INFO ] [2019-01-23 10:37:05] org.springframework.web.servlet.DispatcherServlet -FrameworkServlet 'dispatcherServlet': initialization started
[ INFO ] [2019-01-23 10:37:05] org.springframework.web.servlet.DispatcherServlet -FrameworkServlet 'dispatcherServlet': initialization completed in 43 ms
[ WARN ] [2019-01-23 10:37:05] org.apache.tomcat.jdbc.pool.ConnectionPool -maxIdle is larger than maxActive, setting maxIdle to: 20
[ DEBUG] [2019-01-23 10:37:05] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:37:06] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 10:37:06] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:37:06] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 10:37:06] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:37:07] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:37:07] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 10:37:07] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:37:07] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 10:37:07] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:37:07] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:37:07] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 10:37:08] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:37:08] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 10:37:08] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:37:12] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:37:12] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 10:37:12] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:37:12] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 10:37:12] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:37:12] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:37:12] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 10:37:12] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:37:12] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 10:37:12] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:37:12] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:37:12] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 10:37:12] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:37:12] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 10:37:12] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ INFO ] [2019-01-23 10:41:34] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver -Resolving eureka endpoints via configuration
[ INFO ] [2019-01-23 10:46:34] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver -Resolving eureka endpoints via configuration
[ DEBUG] [2019-01-23 10:51:20] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:51:20] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 10:51:20] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:51:20] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 10:51:20] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:51:20] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:51:20] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 10:51:20] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:51:20] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 10:51:20] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:51:20] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:51:20] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 10:51:20] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:51:20] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 10:51:20] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:51:26] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:51:26] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 10:51:26] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:51:26] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 10:51:26] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:51:26] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:51:26] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 10:51:26] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:51:26] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 10:51:26] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:51:26] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:51:26] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 10:51:26] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:51:26] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 10:51:26] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:51:28] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:51:28] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 10:51:28] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:51:28] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 10:51:28] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:51:28] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:51:28] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 10:51:28] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:51:28] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 10:51:28] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:51:28] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:51:28] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 10:51:28] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:51:28] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 10:51:28] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:51:29] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:51:29] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 10:51:29] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:51:29] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 10:51:29] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:51:29] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:51:29] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 10:51:29] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:51:29] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 10:51:29] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:51:29] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:51:29] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 10:51:29] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:51:29] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 10:51:29] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:51:30] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:51:30] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 10:51:30] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:51:30] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 10:51:30] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:51:30] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:51:30] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 10:51:30] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:51:30] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 10:51:30] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:51:30] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:51:30] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 10:51:30] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:51:30] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 10:51:30] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ INFO ] [2019-01-23 10:51:34] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver -Resolving eureka endpoints via configuration
[ DEBUG] [2019-01-23 10:55:25] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:55:25] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 10:55:25] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:55:25] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 10:55:25] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:55:25] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:55:25] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 10:55:25] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:55:25] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 10:55:25] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:55:25] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:55:25] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 10:55:25] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:55:25] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 10:55:25] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:55:27] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:55:27] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 10:55:27] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:55:27] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 10:55:27] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:55:27] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:55:27] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 10:55:27] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:55:27] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 10:55:27] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:55:27] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:55:27] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 10:55:27] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:55:27] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 10:55:27] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:13] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:13] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 10:56:13] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:13] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 10:56:13] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:13] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:13] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 10:56:13] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:13] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 10:56:13] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:13] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:13] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 10:56:13] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:13] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 10:56:13] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:15] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:15] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 10:56:15] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:15] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 10:56:15] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:15] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:15] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 10:56:15] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:15] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 10:56:15] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:15] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:15] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 10:56:15] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:15] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 10:56:15] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:16] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:16] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 10:56:16] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:16] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 10:56:16] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:16] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:16] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 10:56:16] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:16] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 10:56:16] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:16] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:16] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 10:56:16] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:16] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 10:56:16] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:17] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:17] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 10:56:17] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:17] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 10:56:17] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:17] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:17] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 10:56:17] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:17] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 10:56:17] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:17] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:17] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 10:56:17] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:17] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 10:56:17] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:18] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:18] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 10:56:18] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:18] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 10:56:18] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:18] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:18] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 10:56:18] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:18] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 10:56:18] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:18] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:19] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 10:56:19] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:19] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 10:56:19] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:20] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:20] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 10:56:20] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:20] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 10:56:20] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:20] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:20] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 10:56:20] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:20] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 10:56:20] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:20] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:20] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 10:56:20] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:20] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 10:56:20] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:22] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:22] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 10:56:22] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:22] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 10:56:22] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:22] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:22] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 10:56:22] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:22] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 10:56:22] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:22] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:22] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 10:56:22] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:22] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 10:56:22] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:23] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:23] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 10:56:23] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:23] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 10:56:23] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:23] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:23] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 10:56:23] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:23] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 10:56:23] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:23] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:23] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 10:56:23] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:23] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 10:56:23] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:24] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:24] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 10:56:24] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:24] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 10:56:24] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:24] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:24] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 10:56:24] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:24] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 10:56:24] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:24] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:24] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 10:56:24] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:24] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 10:56:24] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:25] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:25] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 10:56:25] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:25] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 10:56:25] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:25] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:25] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 10:56:25] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:25] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 10:56:25] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:25] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:25] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 10:56:25] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:25] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 10:56:25] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:26] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:26] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 10:56:26] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:26] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 10:56:26] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:26] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:26] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 10:56:26] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:26] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 10:56:26] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:26] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:26] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 10:56:26] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:26] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 10:56:26] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:27] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:27] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 10:56:27] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:27] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 10:56:27] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:27] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:27] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 10:56:27] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:27] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 10:56:27] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:27] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:27] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 10:56:27] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:27] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 10:56:27] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:27] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:27] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 10:56:27] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:27] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 10:56:27] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:27] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:27] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 10:56:27] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:27] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 10:56:27] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:27] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:27] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 10:56:27] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:27] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 10:56:27] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:28] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:28] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 10:56:28] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:28] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 10:56:28] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:28] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:28] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 10:56:28] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:28] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 10:56:28] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:28] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:28] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 10:56:28] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:28] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 10:56:28] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:29] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:29] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 10:56:29] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:29] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 10:56:29] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:29] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:29] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 10:56:29] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:29] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 10:56:29] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:56:29] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:56:29] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 10:56:29] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:56:29] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 10:56:29] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ INFO ] [2019-01-23 10:56:34] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver -Resolving eureka endpoints via configuration
[ DEBUG] [2019-01-23 10:58:37] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:58:37] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 10:58:37] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:58:37] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 10:58:37] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:58:37] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:58:37] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 10:58:37] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:58:37] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 10:58:37] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 10:58:37] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 10:58:37] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 10:58:37] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 10:58:37] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 10:58:37] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ INFO ] [2019-01-23 11:01:34] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver -Resolving eureka endpoints via configuration
[ INFO ] [2019-01-23 11:06:34] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver -Resolving eureka endpoints via configuration
[ DEBUG] [2019-01-23 11:08:52] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 11:08:52] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 11:08:52] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 11:08:52] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 11:08:52] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 11:08:52] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 11:08:52] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 11:08:52] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 11:08:52] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 11:08:52] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 11:08:52] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 11:08:52] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 11:08:52] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 11:08:52] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 11:08:52] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 11:10:10] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 11:10:10] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 11:10:10] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 11:10:10] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 11:10:10] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 11:10:10] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 11:10:10] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 11:10:10] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 11:10:10] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 11:10:10] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 11:10:10] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 11:10:10] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 11:10:10] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 11:10:10] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 11:10:10] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ INFO ] [2019-01-23 11:11:34] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver -Resolving eureka endpoints via configuration
[ DEBUG] [2019-01-23 11:13:00] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 11:13:00] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 11:13:00] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 11:13:00] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 11:13:00] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 11:13:00] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 11:13:00] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 11:13:00] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 11:13:00] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 11:13:00] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 11:13:00] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 11:13:00] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 11:13:00] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 11:13:00] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 11:13:00] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ INFO ] [2019-01-23 11:16:34] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver -Resolving eureka endpoints via configuration
[ DEBUG] [2019-01-23 11:17:59] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 11:17:59] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 11:17:59] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 11:17:59] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 11:17:59] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 11:17:59] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 11:17:59] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 11:17:59] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 11:17:59] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 11:17:59] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 11:18:02] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 11:18:02] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 11:18:02] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 11:18:02] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 11:18:02] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 11:18:08] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 11:18:08] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 11:18:08] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 11:18:08] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 11:18:08] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 11:18:08] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 11:18:08] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 11:18:08] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 11:18:08] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 11:18:08] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 11:18:08] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 11:18:08] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 11:18:08] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 11:18:08] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 11:18:08] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 11:18:21] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 11:18:21] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 11:18:21] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 11:18:21] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 11:18:21] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 11:18:21] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 11:18:21] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 11:18:21] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 11:18:21] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 11:18:21] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 11:18:21] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 11:18:21] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 11:18:22] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 11:18:22] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 11:18:22] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ INFO ] [2019-01-23 11:21:34] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver -Resolving eureka endpoints via configuration
[ INFO ] [2019-01-23 11:26:34] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver -Resolving eureka endpoints via configuration
[ DEBUG] [2019-01-23 11:28:23] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 11:28:23] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 11:28:23] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 11:28:23] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 11:28:23] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 11:28:23] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 11:28:24] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 11:28:24] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 11:28:24] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 11:28:24] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 11:28:24] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 11:28:24] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 11:28:24] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 11:28:24] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 11:28:24] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 11:28:45] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 11:28:45] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 11:28:45] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 11:28:45] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 11:28:45] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 11:28:45] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 11:28:45] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 11:28:45] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 11:28:45] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 11:28:45] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 11:28:46] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 11:28:46] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 11:28:46] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 11:28:46] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 11:28:46] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 11:28:49] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 11:28:49] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 11:28:49] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 11:28:49] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 11:28:49] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 11:28:49] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 11:28:49] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 11:28:49] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 11:28:49] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 11:28:49] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 11:28:49] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 11:28:49] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 11:28:49] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 11:28:49] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 11:28:50] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 11:28:59] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 11:28:59] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 11:28:59] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 11:28:59] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 11:28:59] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 11:28:59] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 11:28:59] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 11:28:59] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 11:28:59] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 11:28:59] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 11:28:59] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 11:28:59] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 11:28:59] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 11:28:59] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 11:28:59] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ INFO ] [2019-01-23 14:00:58] org.springframework.context.annotation.AnnotationConfigApplicationContext -Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@5b068087: startup date [Wed Jan 23 14:00:58 CST 2019]; root of context hierarchy
[ INFO ] [2019-01-23 14:00:59] org.hibernate.validator.internal.util.Version -HV000001: Hibernate Validator 6.0.2.Final
[ INFO ] [2019-01-23 14:01:02] org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor -JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
[ INFO ] [2019-01-23 14:01:02] org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker -Bean 'configurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$65c5ea3e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[ INFO ] [2019-01-23 14:01:03] org.springframework.cloud.netflix.eureka.InstanceInfoFactory -Setting initial instance status as: STARTING
[ INFO ] [2019-01-23 14:01:03] com.netflix.discovery.DiscoveryClient -Initializing Eureka in region us-east-1
[ INFO ] [2019-01-23 14:01:04] com.netflix.discovery.provider.DiscoveryJerseyProvider -Using JSON encoding codec LegacyJacksonJson
[ INFO ] [2019-01-23 14:01:04] com.netflix.discovery.provider.DiscoveryJerseyProvider -Using JSON decoding codec LegacyJacksonJson
[ INFO ] [2019-01-23 14:01:05] com.netflix.discovery.provider.DiscoveryJerseyProvider -Using XML encoding codec XStreamXml
[ INFO ] [2019-01-23 14:01:05] com.netflix.discovery.provider.DiscoveryJerseyProvider -Using XML decoding codec XStreamXml
[ INFO ] [2019-01-23 14:01:05] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver -Resolving eureka endpoints via configuration
[ INFO ] [2019-01-23 14:01:05] com.netflix.discovery.DiscoveryClient -Disable delta property : false
[ INFO ] [2019-01-23 14:01:05] com.netflix.discovery.DiscoveryClient -Single vip registry refresh property : null
[ INFO ] [2019-01-23 14:01:05] com.netflix.discovery.DiscoveryClient -Force full registry fetch : false
[ INFO ] [2019-01-23 14:01:05] com.netflix.discovery.DiscoveryClient -Application is null : false
[ INFO ] [2019-01-23 14:01:05] com.netflix.discovery.DiscoveryClient -Registered Applications size is zero : true
[ INFO ] [2019-01-23 14:01:05] com.netflix.discovery.DiscoveryClient -Application version is -1: true
[ INFO ] [2019-01-23 14:01:05] com.netflix.discovery.DiscoveryClient -Getting all instance registry info from the eureka server
[ INFO ] [2019-01-23 14:01:05] com.netflix.discovery.DiscoveryClient -The response status is 200
[ INFO ] [2019-01-23 14:01:05] com.netflix.discovery.DiscoveryClient -Not registering with Eureka server per configuration
[ INFO ] [2019-01-23 14:01:05] com.netflix.discovery.DiscoveryClient -Discovery Client initialized at timestamp 1548223265841 with initial instances count: 4
[ INFO ] [2019-01-23 14:01:06] org.springframework.cloud.config.client.ConfigServicePropertySourceLocator -Fetching config from server at: http://10.10.1.210:7742/
[ INFO ] [2019-01-23 14:01:07] org.springframework.cloud.config.client.ConfigServicePropertySourceLocator -Located environment: name=demo-user-service, global-swagger,global-db, profiles=[dev], label=master, version=null, state=null
[ INFO ] [2019-01-23 14:01:08] org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration -Located property source: CompositePropertySource [name='configService', propertySources=[MapPropertySource {name='classpath:/config/dev/global-db.yml'}, MapPropertySource {name='classpath:/config/dev/demo-user-service.yml'}]]
[ INFO ] [2019-01-23 14:01:08] com.demo.user.UserApplication -No active profile set, falling back to default profiles: default
[ INFO ] [2019-01-23 14:01:08] org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext -Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@361cd35c: startup date [Wed Jan 23 14:01:08 CST 2019]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@5b068087
[ INFO ] [2019-01-23 14:01:10] org.springframework.cloud.context.scope.GenericScope -BeanFactory id=927133a5-665f-3934-8b2b-084bf22dc736
[ INFO ] [2019-01-23 14:01:10] org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor -JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
[ INFO ] [2019-01-23 14:01:11] org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$49abe741] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[ INFO ] [2019-01-23 14:01:11] org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker -Bean 'org.springframework.cloud.netflix.metrics.MetricsInterceptorConfiguration$MetricsRestTemplateConfiguration' of type [org.springframework.cloud.netflix.metrics.MetricsInterceptorConfiguration$MetricsRestTemplateConfiguration$$EnhancerBySpringCGLIB$$7bd88d82] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[ INFO ] [2019-01-23 14:01:11] org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker -Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$65c5ea3e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[ INFO ] [2019-01-23 14:01:11] org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer -Tomcat initialized with port(s): 6608 (http)
[ INFO ] [2019-01-23 14:01:11] org.apache.catalina.core.StandardService -Starting service [Tomcat]
[ INFO ] [2019-01-23 14:01:11] org.apache.catalina.core.StandardEngine -Starting Servlet Engine: Apache Tomcat/8.5.20
[ INFO ] [2019-01-23 14:01:12] org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] -Initializing Spring embedded WebApplicationContext
[ INFO ] [2019-01-23 14:01:12] org.springframework.web.context.ContextLoader -Root WebApplicationContext: initialization completed in 4005 ms
[ INFO ] [2019-01-23 14:01:12] org.springframework.boot.web.servlet.ServletRegistrationBean -Mapping servlet: 'dispatcherServlet' to [/]
[ INFO ] [2019-01-23 14:01:12] org.springframework.boot.web.servlet.ServletRegistrationBean -Mapping servlet: 'statViewServlet' to [/druid/*]
[ INFO ] [2019-01-23 14:01:12] org.springframework.boot.web.servlet.FilterRegistrationBean -Mapping filter: 'metricsFilter' to: [/*]
[ INFO ] [2019-01-23 14:01:12] org.springframework.boot.web.servlet.FilterRegistrationBean -Mapping filter: 'characterEncodingFilter' to: [/*]
[ INFO ] [2019-01-23 14:01:12] org.springframework.boot.web.servlet.FilterRegistrationBean -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
[ INFO ] [2019-01-23 14:01:12] org.springframework.boot.web.servlet.FilterRegistrationBean -Mapping filter: 'httpPutFormContentFilter' to: [/*]
[ INFO ] [2019-01-23 14:01:12] org.springframework.boot.web.servlet.FilterRegistrationBean -Mapping filter: 'requestContextFilter' to: [/*]
[ INFO ] [2019-01-23 14:01:12] org.springframework.boot.web.servlet.FilterRegistrationBean -Mapping filter: 'webRequestLoggingFilter' to: [/*]
[ INFO ] [2019-01-23 14:01:12] org.springframework.boot.web.servlet.FilterRegistrationBean -Mapping filter: 'webStatFilter' to urls: [/*]
[ INFO ] [2019-01-23 14:01:12] org.springframework.boot.web.servlet.FilterRegistrationBean -Mapping filter: 'applicationContextIdFilter' to: [/*]
[ INFO ] [2019-01-23 14:01:14] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -Mapped "{[/user/queryUserDto],methods=[POST],consumes=[application/json;charset=UTF-8],produces=[application/json;charset=UTF-8]}" onto public com.demo.common.structure.ResultPageBean<java.util.List<com.demo.user.api.dto.rsp.UserDto>> com.demo.user.controller.UserControllerImpl.queryUserDto(com.demo.user.api.dto.req.QueryUserReq)
[ INFO ] [2019-01-23 14:01:14] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -Mapped "{[/user/queryUserById],methods=[POST],consumes=[application/json;charset=UTF-8],produces=[application/json;charset=UTF-8]}" onto public com.demo.common.structure.ResultBean<com.demo.user.api.dto.rsp.UserDto> com.demo.user.controller.UserControllerImpl.queryUserById(com.demo.user.api.dto.req.QueryShopById)
[ INFO ] [2019-01-23 14:01:14] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
[ INFO ] [2019-01-23 14:01:14] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
[ INFO ] [2019-01-23 14:01:14] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
[ INFO ] [2019-01-23 14:01:14] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
[ INFO ] [2019-01-23 14:01:14] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
[ INFO ] [2019-01-23 14:01:14] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
[ INFO ] [2019-01-23 14:01:15] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/loggers/{name:.*}],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.LoggersMvcEndpoint.get(java.lang.String)
[ INFO ] [2019-01-23 14:01:15] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/loggers/{name:.*}],methods=[POST],consumes=[application/vnd.spring-boot.actuator.v1+json || application/json],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.LoggersMvcEndpoint.set(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)
[ INFO ] [2019-01-23 14:01:15] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/loggers || /loggers.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 14:01:15] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/autoconfig || /autoconfig.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 14:01:15] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/info || /info.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 14:01:15] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/trace || /trace.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 14:01:15] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/heapdump || /heapdump.json],methods=[GET],produces=[application/octet-stream]}" onto public void org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpoint.invoke(boolean,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.io.IOException,javax.servlet.ServletException
[ INFO ] [2019-01-23 14:01:15] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/metrics/{name:.*}],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.MetricsMvcEndpoint.value(java.lang.String)
[ INFO ] [2019-01-23 14:01:15] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/metrics || /metrics.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 14:01:15] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/refresh || /refresh.json],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.endpoint.GenericPostableMvcEndpoint.invoke()
[ INFO ] [2019-01-23 14:01:15] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/env/{name:.*}],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EnvironmentMvcEndpoint.value(java.lang.String)
[ INFO ] [2019-01-23 14:01:15] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/env || /env.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 14:01:15] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/dump || /dump.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 14:01:15] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/env],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.context.environment.EnvironmentManagerMvcEndpoint.value(java.util.Map<java.lang.String, java.lang.String>)
[ INFO ] [2019-01-23 14:01:15] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/env/reset],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> org.springframework.cloud.context.environment.EnvironmentManagerMvcEndpoint.reset()
[ INFO ] [2019-01-23 14:01:15] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/pause || /pause.json],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.endpoint.GenericPostableMvcEndpoint.invoke()
[ INFO ] [2019-01-23 14:01:15] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/configprops || /configprops.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 14:01:15] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/resume || /resume.json],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.endpoint.GenericPostableMvcEndpoint.invoke()
[ INFO ] [2019-01-23 14:01:15] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/mappings || /mappings.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 14:01:15] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/service-registry/instance-status],methods=[GET]}" onto public org.springframework.http.ResponseEntity org.springframework.cloud.client.serviceregistry.endpoint.ServiceRegistryEndpoint.getStatus()
[ INFO ] [2019-01-23 14:01:15] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/service-registry/instance-status],methods=[POST]}" onto public org.springframework.http.ResponseEntity<?> org.springframework.cloud.client.serviceregistry.endpoint.ServiceRegistryEndpoint.setStatus(java.lang.String)
[ INFO ] [2019-01-23 14:01:15] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/beans || /beans.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 14:01:15] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/health || /health.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint.invoke(javax.servlet.http.HttpServletRequest,java.security.Principal)
[ INFO ] [2019-01-23 14:01:15] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/archaius || /archaius.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ INFO ] [2019-01-23 14:01:15] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/auditevents || /auditevents.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public org.springframework.http.ResponseEntity<?> org.springframework.boot.actuate.endpoint.mvc.AuditEventsMvcEndpoint.findByPrincipalAndAfterAndType(java.lang.String,java.util.Date,java.lang.String)
[ INFO ] [2019-01-23 14:01:15] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/restart || /restart.json],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.context.restart.RestartMvcEndpoint.invoke()
[ INFO ] [2019-01-23 14:01:15] org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping -Mapped "{[/features || /features.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
[ WARN ] [2019-01-23 14:01:15] com.netflix.config.sources.URLConfigurationSource -No URLs will be polled as dynamic configuration sources.
[ INFO ] [2019-01-23 14:01:15] com.netflix.config.sources.URLConfigurationSource -To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[ WARN ] [2019-01-23 14:01:15] com.netflix.config.sources.URLConfigurationSource -No URLs will be polled as dynamic configuration sources.
[ INFO ] [2019-01-23 14:01:15] com.netflix.config.sources.URLConfigurationSource -To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[ INFO ] [2019-01-23 14:01:16] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter -Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@361cd35c: startup date [Wed Jan 23 14:01:08 CST 2019]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@5b068087
[ INFO ] [2019-01-23 14:01:16] org.springframework.web.servlet.handler.SimpleUrlHandlerMapping -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
[ INFO ] [2019-01-23 14:01:16] org.springframework.web.servlet.handler.SimpleUrlHandlerMapping -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
[ INFO ] [2019-01-23 14:01:16] org.springframework.web.servlet.handler.SimpleUrlHandlerMapping -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
[ INFO ] [2019-01-23 14:01:17] org.springframework.ui.freemarker.SpringTemplateLoader -SpringTemplateLoader for FreeMarker: using resource loader [org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@361cd35c: startup date [Wed Jan 23 14:01:08 CST 2019]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@5b068087] and template loader path [classpath:/templates/]
[ INFO ] [2019-01-23 14:01:17] org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer -ClassTemplateLoader for Spring macros added to FreeMarker configuration
[ INFO ] [2019-01-23 14:01:17] com.netflix.discovery.DiscoveryClient -Shutting down DiscoveryClient ...
[ INFO ] [2019-01-23 14:01:17] com.netflix.discovery.DiscoveryClient -Completed shut down of DiscoveryClient
[ INFO ] [2019-01-23 14:01:17] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Registering beans for JMX exposure on startup
[ INFO ] [2019-01-23 14:01:17] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Bean with name 'environmentManager' has been autodetected for JMX exposure
[ INFO ] [2019-01-23 14:01:17] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Bean with name 'configurationPropertiesRebinder' has been autodetected for JMX exposure
[ INFO ] [2019-01-23 14:01:17] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Bean with name 'refreshEndpoint' has been autodetected for JMX exposure
[ INFO ] [2019-01-23 14:01:17] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Bean with name 'restartEndpoint' has been autodetected for JMX exposure
[ INFO ] [2019-01-23 14:01:17] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Bean with name 'serviceRegistryEndpoint' has been autodetected for JMX exposure
[ INFO ] [2019-01-23 14:01:17] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Bean with name 'refreshScope' has been autodetected for JMX exposure
[ INFO ] [2019-01-23 14:01:17] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Located managed bean 'environmentManager': registering with JMX server as MBean [org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager]
[ INFO ] [2019-01-23 14:01:17] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Located managed bean 'restartEndpoint': registering with JMX server as MBean [org.springframework.cloud.context.restart:name=restartEndpoint,type=RestartEndpoint]
[ INFO ] [2019-01-23 14:01:17] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Located managed bean 'serviceRegistryEndpoint': registering with JMX server as MBean [org.springframework.cloud.client.serviceregistry.endpoint:name=serviceRegistryEndpoint,type=ServiceRegistryEndpoint]
[ INFO ] [2019-01-23 14:01:17] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Located managed bean 'refreshScope': registering with JMX server as MBean [org.springframework.cloud.context.scope.refresh:name=refreshScope,type=RefreshScope]
[ INFO ] [2019-01-23 14:01:17] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Located managed bean 'configurationPropertiesRebinder': registering with JMX server as MBean [org.springframework.cloud.context.properties:name=configurationPropertiesRebinder,context=361cd35c,type=ConfigurationPropertiesRebinder]
[ INFO ] [2019-01-23 14:01:17] org.springframework.jmx.export.annotation.AnnotationMBeanExporter -Located managed bean 'refreshEndpoint': registering with JMX server as MBean [org.springframework.cloud.endpoint:name=refreshEndpoint,type=RefreshEndpoint]
[ INFO ] [2019-01-23 14:01:17] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Registering beans for JMX exposure on startup
[ INFO ] [2019-01-23 14:01:18] org.springframework.context.support.DefaultLifecycleProcessor -Starting beans in phase 0
[ INFO ] [2019-01-23 14:01:18] org.springframework.cloud.netflix.eureka.InstanceInfoFactory -Setting initial instance status as: STARTING
[ INFO ] [2019-01-23 14:01:18] com.netflix.discovery.DiscoveryClient -Initializing Eureka in region us-east-1
[ INFO ] [2019-01-23 14:01:18] com.netflix.discovery.provider.DiscoveryJerseyProvider -Using JSON encoding codec LegacyJacksonJson
[ INFO ] [2019-01-23 14:01:18] com.netflix.discovery.provider.DiscoveryJerseyProvider -Using JSON decoding codec LegacyJacksonJson
[ INFO ] [2019-01-23 14:01:18] com.netflix.discovery.provider.DiscoveryJerseyProvider -Using XML encoding codec XStreamXml
[ INFO ] [2019-01-23 14:01:18] com.netflix.discovery.provider.DiscoveryJerseyProvider -Using XML decoding codec XStreamXml
[ INFO ] [2019-01-23 14:01:18] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver -Resolving eureka endpoints via configuration
[ INFO ] [2019-01-23 14:01:18] com.netflix.discovery.DiscoveryClient -Disable delta property : false
[ INFO ] [2019-01-23 14:01:18] com.netflix.discovery.DiscoveryClient -Single vip registry refresh property : null
[ INFO ] [2019-01-23 14:01:18] com.netflix.discovery.DiscoveryClient -Force full registry fetch : false
[ INFO ] [2019-01-23 14:01:18] com.netflix.discovery.DiscoveryClient -Application is null : false
[ INFO ] [2019-01-23 14:01:18] com.netflix.discovery.DiscoveryClient -Registered Applications size is zero : true
[ INFO ] [2019-01-23 14:01:18] com.netflix.discovery.DiscoveryClient -Application version is -1: true
[ INFO ] [2019-01-23 14:01:18] com.netflix.discovery.DiscoveryClient -Getting all instance registry info from the eureka server
[ INFO ] [2019-01-23 14:01:18] com.netflix.discovery.DiscoveryClient -The response status is 200
[ INFO ] [2019-01-23 14:01:18] com.netflix.discovery.DiscoveryClient -Starting heartbeat executor: renew interval is: 30
[ INFO ] [2019-01-23 14:01:18] com.netflix.discovery.InstanceInfoReplicator -InstanceInfoReplicator onDemand update allowed rate per min is 4
[ INFO ] [2019-01-23 14:01:18] com.netflix.discovery.DiscoveryClient -Discovery Client initialized at timestamp 1548223278837 with initial instances count: 4
[ INFO ] [2019-01-23 14:01:18] org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry -Registering application demo-user-service with eureka with status UP
[ INFO ] [2019-01-23 14:01:18] com.netflix.discovery.DiscoveryClient -Saw local status change event StatusChangeEvent [timestamp=1548223278886, current=UP, previous=STARTING]
[ INFO ] [2019-01-23 14:01:18] com.netflix.discovery.DiscoveryClient -DiscoveryClient_DEMO-USER-SERVICE/10.10.1.210:6608: registering service...
[ INFO ] [2019-01-23 14:01:18] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'auditEventsEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=auditEventsEndpoint]
[ INFO ] [2019-01-23 14:01:18] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'archaiusEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=archaiusEndpoint]
[ INFO ] [2019-01-23 14:01:18] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'featuresEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=featuresEndpoint]
[ INFO ] [2019-01-23 14:01:18] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'requestMappingEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=requestMappingEndpoint]
[ INFO ] [2019-01-23 14:01:18] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'environmentEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=environmentEndpoint]
[ INFO ] [2019-01-23 14:01:18] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'healthEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=healthEndpoint]
[ INFO ] [2019-01-23 14:01:18] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'beansEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=beansEndpoint]
[ INFO ] [2019-01-23 14:01:18] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'infoEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=infoEndpoint]
[ INFO ] [2019-01-23 14:01:18] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'loggersEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=loggersEndpoint]
[ INFO ] [2019-01-23 14:01:18] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'metricsEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=metricsEndpoint]
[ INFO ] [2019-01-23 14:01:18] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'traceEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=traceEndpoint]
[ INFO ] [2019-01-23 14:01:18] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'dumpEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=dumpEndpoint]
[ INFO ] [2019-01-23 14:01:18] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'autoConfigurationReportEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=autoConfigurationReportEndpoint]
[ INFO ] [2019-01-23 14:01:18] org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter -Located managed bean 'configurationPropertiesReportEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=configurationPropertiesReportEndpoint]
[ INFO ] [2019-01-23 14:01:18] org.springframework.context.support.DefaultLifecycleProcessor -Starting beans in phase 2147483647
[ INFO ] [2019-01-23 14:01:18] springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper -Context refreshed
[ INFO ] [2019-01-23 14:01:19] com.netflix.discovery.DiscoveryClient -DiscoveryClient_DEMO-USER-SERVICE/10.10.1.210:6608 - registration status: 204
[ INFO ] [2019-01-23 14:01:19] springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper -Found 1 custom documentation plugin(s)
[ INFO ] [2019-01-23 14:01:19] springfox.documentation.spring.web.scanners.ApiListingReferenceScanner -Scanning for api listing references
[ INFO ] [2019-01-23 14:01:19] org.apache.coyote.http11.Http11NioProtocol -Initializing ProtocolHandler ["http-nio-6608"]
[ INFO ] [2019-01-23 14:01:19] org.apache.coyote.http11.Http11NioProtocol -Starting ProtocolHandler ["http-nio-6608"]
[ INFO ] [2019-01-23 14:01:19] org.apache.tomcat.util.net.NioSelectorPool -Using a shared selector for servlet write/read
[ INFO ] [2019-01-23 14:01:19] org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer -Tomcat started on port(s): 6608 (http)
[ INFO ] [2019-01-23 14:01:19] org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration -Updating port to 6608
[ INFO ] [2019-01-23 14:01:19] com.demo.user.UserApplication -Started UserApplication in 21.779 seconds (JVM running for 25.742)
[ INFO ] [2019-01-23 14:01:55] org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] -Initializing Spring FrameworkServlet 'dispatcherServlet'
[ INFO ] [2019-01-23 14:01:55] org.springframework.web.servlet.DispatcherServlet -FrameworkServlet 'dispatcherServlet': initialization started
[ INFO ] [2019-01-23 14:01:55] org.springframework.web.servlet.DispatcherServlet -FrameworkServlet 'dispatcherServlet': initialization completed in 46 ms
[ WARN ] [2019-01-23 14:01:55] org.apache.tomcat.jdbc.pool.ConnectionPool -maxIdle is larger than maxActive, setting maxIdle to: 20
[ DEBUG] [2019-01-23 14:01:56] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 14:01:56] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 14:01:56] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 14:01:56] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 14:01:56] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 14:01:59] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 14:01:59] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 14:01:59] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 14:01:59] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 14:01:59] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 14:01:59] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 14:01:59] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 14:01:59] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 14:01:59] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 14:01:59] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 14:02:04] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 14:02:04] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 14:02:04] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 14:02:04] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 14:02:04] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 14:02:04] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 14:02:04] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 14:02:04] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 14:02:04] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 14:02:04] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 14:02:04] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 14:02:04] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 14:02:04] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 14:02:04] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 14:02:04] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 14:02:07] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 14:02:07] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 14:02:08] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 14:02:08] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 14:02:08] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 14:02:08] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 14:02:08] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 14:02:08] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 14:02:08] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 14:02:08] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 14:02:08] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 14:02:08] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 14:02:08] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 14:02:08] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 14:02:08] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 14:02:13] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 14:02:13] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 1(String)
[ TRACE] [2019-01-23 14:02:13] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 14:02:13] com.demo.user.dao.UserDao.queryUserById -<==        Row: 1, 郑磊, 123, 湖北, 22, 男
[ DEBUG] [2019-01-23 14:02:13] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 14:02:13] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 14:02:13] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 2(String)
[ TRACE] [2019-01-23 14:02:14] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 14:02:14] com.demo.user.dao.UserDao.queryUserById -<==        Row: 2, 郑晶, 123, 广东, 22, 男
[ DEBUG] [2019-01-23 14:02:14] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
[ DEBUG] [2019-01-23 14:02:14] com.demo.user.dao.UserDao.queryUserById -==>  Preparing: select * from user where id=? 
[ DEBUG] [2019-01-23 14:02:14] com.demo.user.dao.UserDao.queryUserById -==> Parameters: 3(String)
[ TRACE] [2019-01-23 14:02:14] com.demo.user.dao.UserDao.queryUserById -<==    Columns: id, user_name, user_password, city, age, sex
[ TRACE] [2019-01-23 14:02:14] com.demo.user.dao.UserDao.queryUserById -<==        Row: 3, 张三, 123, 湖南, 22, 男
[ DEBUG] [2019-01-23 14:02:14] com.demo.user.dao.UserDao.queryUserById -<==      Total: 1
